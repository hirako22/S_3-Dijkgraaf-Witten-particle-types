"""gene = "m1,m2,m3" # m2*,m1,m3,m1* m3*,m2,m1,m2* m1*,m3,m2,m3*
quot = ["m2*,m1,m3,m1*","m3*,m2,m1,m2*","m1*,m3,m2,m3*"]
#l = "m3,m1,m2"
l = "m1*,m1*,m1*,m3,m1,m2" # recovers particle types from notes
#gene = "x1,x3"
#quot = ["x1*,x3*,x1,x3*,x1*,x3,x1,x3*,x1,x3"]
#l = "x1,x3*,x1*,x3,x3,x1*,x3*,x1"
print(particleTypes(gene, quot, l))"""

test = "-1, 3, -2, 1, -3, 2" # trefoil x1*,x2,x3,x2* x2*,x3,x1,x3* x3*,x1,x2,x1*
#test = "1, -8, 2, -5, 3, -1, 4, -2, 5, -11, 6, -10, 7, -4, 8, -3, 9, -7, 10, -6, 11, -9"
#test = "-2, 3, -1, -4, 5, -6, -7, 8, -3, 2, 9, -10, 4, -11, 6, -12, 10, -9, -8, 7, 12, -5, 11" # 12n_356
# find gauss codes with consecutive positive and negative numbers to test
printParticlesGauss(test)
customGroupInput()




test = "-1, 3, -2, 1, -3, 2" # trefoil x1*,x2,x3,x2* x2*,x3,x1,x3* x3*,x1,x2,x1*
#test = "1, -8, 2, -5, 3, -1, 4, -2, 5, -11, 6, -10, 7, -4, 8, -3, 9, -7, 10, -6, 11, -9"
#test = "-2, 3, -1, -4, 5, -6, -7, 8, -3, 2, 9, -10, 4, -11, 6, -12, 10, -9, -8, 7, 12, -5, 11" # 12n_356
# find gauss codes with consecutive positive and negative numbers to test
printParticlesGauss(test)
customGroupInput()




test = "-1, 3, -2, 1, -3, 2" # trefoil x1*,x2,x3,x2* x2*,x3,x1,x3 x3*,x1,x2,x1*
#test = "1, -8, 2, -5, 3, -1, 4, -2, 5, -11, 6, -10, 7, -4, 8, -3, 9, -7, 10, -6, 11, -9"
#test = "-2, 3, -1, -4, 5, -6, -7, 8, -3, 2, 9, -10, 4, -11, 6, -12, 10, -9, -8, 7, 12, -5, 11" # 12n_356
# find gauss codes with consecutive positive and negative numbers to test
s = printParticlesGauss(test)
print(s)
#customGroupInput()




from google.colab import drive 
drive.mount('/content/gdrive')


import pandas as pd
df = pd.read_csv('gdrive/My Drive/knotinfo.csv')


with open('gdrive/My Drive/d_8.txt', 'w') as writefile:
  writefile.write("\t D_8 particle types")
  skip = True
  for row in range(df.shape[0]):
    name = df.at[row, 'Name']
    if name == '3_1':
      skip = False
    if not skip:
      code = df.at[row, 'Gauss Notation']
      code = code.replace(';',',')[1:-1]
      writefile.write("----\n")
      writefile.write(name+"\n")
      writefile.write("----\n")
      writefile.write("\tGauss code: ["+code+"]\n")
      sp = printParticlesGauss(code)
      writefile.write(sp)
      writefile.write("\n")
      print(name)
      
      
# shamelessly bastardized from https://www.cs.mcgill.ca/~aassaf9/python/algorithm_x.html by Ali Assaf
def select(X, Y, r):
  cols = []
  for j in Y[r]:
    for i in X[j]:
      for k in Y[i]:
        if k != j:
          X[k].remove(i)
    cols.append(X.pop(j))
  return cols

def deselect(X, Y, r, cols):
  for j in reversed(Y[r]):
    X[j] = cols.pop()
    for i in X[j]:
      for k in Y[i]:
        if k != j:
          X[k].add(i)

def solve(X, Y, solution=[]):
  if not X:
    yield list(solution)
  else:
    c = min(X, key=lambda c: len(X[c]))
    for r in list(X[c]):
      solution.append(r)
      cols = select(X, Y, r)
      for s in solve(X, Y, solution):
        yield s
      deselect(X, Y, r, cols)
      solution.pop()


def algorithm_X(rows):
  Xa, Ya = {}, {}
  max = 0
  for i in range(len(rows)):
    row = rows[i]
    Ya[i] = row
    if np.max(row) > max:
      max = np.max(row)
  Xa = {i: set() for i in range(max+1)}
  for i in Ya:
    for j in Ya[i]:
      Xa[j].add(i)
  allSols = []
  for solution in solve(Xa, Ya, []):
    allSols.append(solution)
  print(allSols)

rowsTest = [[0,1,2], [0,2], [1], [3]]
#rowsTest = [[0, 3, 6], [0, 4, 7], [0, 5, 8], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3], [4], [5], [6], [7], [8]]

algorithm_X(rowsTest)
